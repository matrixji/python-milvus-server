diff --git a/internal/core/CMakeLists.txt b/internal/core/CMakeLists.txt
index e4e469e1d..703632058 100644
--- a/internal/core/CMakeLists.txt
+++ b/internal/core/CMakeLists.txt
@@ -36,6 +36,10 @@ add_definitions(-DELPP_THREAD_SAFE)
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 message( STATUS "Building using CMake version: ${CMAKE_VERSION}" )
 
+if ( MSYS )
+    add_definitions(-DPROTOBUF_USE_DLLS)
+endif ()
+
 project(core)
 include(CheckCXXCompilerFlag)
 if ( APPLE )
diff --git a/internal/core/src/indexbuilder/CMakeLists.txt b/internal/core/src/indexbuilder/CMakeLists.txt
index cae7415c9..29cef2aa0 100644
--- a/internal/core/src/indexbuilder/CMakeLists.txt
+++ b/internal/core/src/indexbuilder/CMakeLists.txt
@@ -23,6 +23,7 @@ add_library(milvus_indexbuilder SHARED ${INDEXBUILDER_FILES})
 find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 if (MSYS)
+find_library(TBB NAMES tbb12)
 set(PLATFORM_LIBS -Wl,--allow-multiple-definition)
 endif ()
 
diff --git a/internal/core/src/pb/CMakeLists.txt b/internal/core/src/pb/CMakeLists.txt
index 3c5ca9f92..eaf2f902f 100644
--- a/internal/core/src/pb/CMakeLists.txt
+++ b/internal/core/src/pb/CMakeLists.txt
@@ -16,6 +16,8 @@ set( proto_file_names
 
 set( PROTO_PATH  "${MILVUS_SOURCE_DIR}/../../cmake_build/thirdparty/milvus-proto/proto/")
 
+find_package(Protobuf)
+
 FOREACH(proto_file ${proto_file_names})
     STRING( REGEX REPLACE "[^/]proto" "" proto_src_file_name ${proto_file} )
     LIST( APPEND milvus_proto_srcs "${proto_src_file_name}.pb.cc" )
@@ -53,7 +55,12 @@ FOREACH(proto_file ${proto_file_names})
 
 ENDFOREACH(proto_file)
 
-add_library(milvus_proto STATIC ${milvus_proto_srcs})
+if ( MSYS )
+    # for Windows, as we now using protobuf's dll
+    add_library(milvus_proto SHARED ${milvus_proto_srcs})
+else ( MSYS )
+    add_library(milvus_proto STATIC ${milvus_proto_srcs})
+endif ( MSYS )
 message(STATUS "milvus proto sources: " ${milvus_proto_srcs})
 
 target_link_libraries( milvus_proto PUBLIC ${CONAN_LIBS} )
diff --git a/internal/core/src/segcore/CMakeLists.txt b/internal/core/src/segcore/CMakeLists.txt
index 901af5d73..440ba07f0 100644
--- a/internal/core/src/segcore/CMakeLists.txt
+++ b/internal/core/src/segcore/CMakeLists.txt
@@ -42,6 +42,7 @@ find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 
 if (MSYS)
+  find_library(TBB NAMES tbb12)
   set(PLATFORM_LIBS )
 endif()
 
diff --git a/internal/core/thirdparty/rocksdb/CMakeLists.txt b/internal/core/thirdparty/rocksdb/CMakeLists.txt
index ca1295b79..98e489f4a 100644
--- a/internal/core/thirdparty/rocksdb/CMakeLists.txt
+++ b/internal/core/thirdparty/rocksdb/CMakeLists.txt
@@ -3,6 +3,6 @@ if (MSYS)
   install(FILES "${CMAKE_CURRENT_BINARY_DIR}/rocksdb.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 else()
   milvus_add_pkg_config("rocksdb")
+  install(DIRECTORY "${CONAN_INCLUDE_DIRS_ROCKSDB}/rocksdb/" DESTINATION "${CMAKE_INSTALL_PREFIX}/include/rocksdb/")
 endif()
 
-install(DIRECTORY "${CONAN_INCLUDE_DIRS_ROCKSDB}/rocksdb/" DESTINATION "${CMAKE_INSTALL_PREFIX}/include/rocksdb/")
diff --git a/internal/util/etcd/etcd_server.go b/internal/util/etcd/etcd_server.go
index 75f81c43e..ffd758812 100644
--- a/internal/util/etcd/etcd_server.go
+++ b/internal/util/etcd/etcd_server.go
@@ -1,6 +1,9 @@
 package etcd
 
 import (
+	"net/url"
+	"os"
+	"runtime"
 	"sync"
 
 	"github.com/milvus-io/milvus/internal/log"
@@ -45,6 +48,12 @@ func InitEtcdServer(
 			} else {
 				cfg = embed.NewConfig()
 			}
+			if runtime.GOOS == "windows" {
+				err := zap.RegisterSink("winfile", newWinFileSink)
+				if err != nil {
+					initError = err
+				}
+			}
 			cfg.Dir = dataDir
 			cfg.LogOutputs = []string{logPath}
 			cfg.LogLevel = logLevel
@@ -73,3 +82,10 @@ func StopEtcdServer() {
 		})
 	}
 }
+
+// special file sink for zap, as etcd using zap as Logger
+// See: https://github.com/uber-go/zap/issues/621
+func newWinFileSink(u *url.URL) (zap.Sink, error) {
+	// e.g. winfile:///D:/test/ -> D:/test/
+	return os.OpenFile(u.Path[1:], os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0600)
+}
diff --git a/scripts/core_build.sh b/scripts/core_build.sh
index ac013207a..fadc396aa 100755
--- a/scripts/core_build.sh
+++ b/scripts/core_build.sh
@@ -196,8 +196,49 @@ case "${unameOut}" in
       conan install ${CPP_SRC_DIR} --install-folder conan --build=missing -s compiler.libcxx=libstdc++11 || { echo 'conan install failed'; exit 1; }
     fi 
     ;;
-  *)   
-    echo "Cannot build on windows"
+  MINGW*)
+    CONAN_LIBS="arrow;parquet;protobuf"
+    # currently we use nothing from conan
+    cat << EOF > msys2_profile
+[settings]
+arch=x86_64
+arch_build=x86_64
+build_type=Release
+compiler=gcc
+compiler.exception=seh
+compiler.libcxx=libstdc++11
+compiler.threads=posix
+compiler.version=8.4
+os=Windows
+os_build=Windows
+
+[options]
+[build_requires]
+
+[env]
+EOF
+    cat << EOF > conanfile.txt
+[requires]
+
+[generators]
+cmake
+
+[options]
+
+[imports]
+bin, * -> ../bin
+lib, *.dylib -> ../lib
+lib, *.dll -> ../lib
+lib, *.so* -> ../lib
+
+EOF
+    virtualenv venv
+    venv/bin/pip install conan
+    venv/bin/conan install . --install-folder conan --build=missing --profile msys2_profile
+    ;;
+  *)
+    echo "Not support platform: ${unameOut}"
+    exit 1
     ;;
 esac
 
@@ -217,6 +258,7 @@ ${CMAKE_EXTRA_ARGS} \
 -DCUSTOM_THIRDPARTY_DOWNLOAD_PATH=${CUSTOM_THIRDPARTY_PATH} \
 -DEMBEDDED_MILVUS=${EMBEDDED_MILVUS} \
 -DBUILD_DISK_ANN=${BUILD_DISK_ANN} \
+-DCONAN_LIBS=${CONAN_LIBS}
 ${CPP_SRC_DIR}"
 
 echo ${CMAKE_CMD}
diff --git a/scripts/install_deps_msys.sh b/scripts/install_deps_msys.sh
index ba1cfc9c0..23a67bec3 100644
--- a/scripts/install_deps_msys.sh
+++ b/scripts/install_deps_msys.sh
@@ -15,15 +15,20 @@ pacmanInstall()
     mingw-w64-x86_64-make \
     mingw-w64-x86_64-ccache \
     mingw-w64-x86_64-cmake \
+    mingw-w64-x86_64-arrow \
+    mingw-w64-x86_64-boost \
+    mingw-w64-x86_64-tbb \
+    mingw-w64-x86_64-yaml-cpp \
     mingw-w64-x86_64-openblas \
     mingw-w64-x86_64-clang \
     mingw-w64-x86_64-clang-tools-extra \
     mingw-w64-x86_64-python2 \
     mingw-w64-x86_64-python-pip \
+    mingw-w64-x86_64-python-virtualenv \
     mingw-w64-x86_64-diffutils \
-    mingw-w64-x86_64-go 
-
-  pip3 install conan
+    mingw-w64-x86_64-go
+  pacman -U --noconfirm \
+    https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-rocksdb-6.26.1-1-any.pkg.tar.zst
 }
 
 updateKey()
diff --git a/scripts/setenv.sh b/scripts/setenv.sh
index 98863a1c0..89867065b 100644
--- a/scripts/setenv.sh
+++ b/scripts/setenv.sh
@@ -21,7 +21,7 @@ set -e
 
 SOURCE="${BASH_SOURCE[0]}"
 # fix on zsh environment
-if [[ "$SOURCE" == "" ]]; then 
+if [[ "$SOURCE" == "" ]]; then
   SOURCE="$0"
 fi
 
@@ -45,13 +45,14 @@ case "${unameOut}" in
       export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$ROOT_DIR/internal/core/output/lib/pkgconfig:$ROOT_DIR/internal/core/output/lib64/pkgconfig"
       export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$ROOT_DIR/internal/core/output/lib:$ROOT_DIR/internal/core/output/lib64"
       export RPATH=$LD_LIBRARY_PATH;;
-    Darwin*)    
+    Darwin*)
       export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$ROOT_DIR/internal/core/output/lib/pkgconfig"
       export DYLD_LIBRARY_PATH=$ROOT_DIR/internal/core/output/lib
       export RPATH=$DYLD_LIBRARY_PATH;;
-    MINGW*)          
-      extra_path=$(cygpath -w "$ROOT_DIR/internal/core/output/lib")
-      export PKG_CONFIG_PATH="${PKG_CONFIG_PATH};${extra_path}\pkgconfig"
+    MINGW*)
+      # for make requiues cygpath -u, for mgwin32-make requires cygpath -w
+      extra_path="$(cygpath -u $ROOT_DIR/internal/core/output/lib)"
+      export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${extra_path}/pkgconfig"
       export LD_LIBRARY_PATH=$extra_path
       export RPATH=$LD_LIBRARY_PATH;;
     *)
